
//给你一个整数数组 nums ，请你返回所有下标对 0 <= i, j < nums.length 的 floor(nums[i] / nums[j]) 结果之和。由于答案可能会很大，请你返回答案对109 + 7 取余 的结果。
//函数 floor() 返回输入数字的整数部分。
//示例 1：

//输入：nums = [2,5,9]
//输出：10
//解释：
//floor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0
//floor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1
//floor(5 / 2) = 2
//floor(9 / 2) = 4
//floor(9 / 5) = 1
//我们计算每一个数对商向下取整的结果并求和得到 10 。
//示例 2：
//输入：nums = [7,7,7,7,7,7,7]
//输出：49

//遇事不决，暴力美学
class Solution {
public:
    int sumOfFlooredPairs(vector<int>& nums) 
    {
        long int sum=0;
        int length=nums.size();
        for(int i=0;i<length;i++)
        {
            for(int j=0;j<length;j++)
            {
                sum+=nums[i]/nums[j];
            }
        }
        int a=1e9+7;
        sum=sum%a;
        return sum;

    }
};

class Solution {
public:
    int sumOfFlooredPairs(vector<int>& nums) {
        int n = nums.size();
        vector<long long> count(100005, 0);
        int end = -1;
        for(auto i: nums){
            count[i]++;
            end = max(end, i);
        }
        for(int i=1; i<=end; ++i){
            count[i] += count[i-1];
        }
        long long res = 0;
        for(int i=1; i<=end; ++i){
            if(count[i]==count[i-1])continue;
            long long c = count[i]-count[i-1];
            for(int j=i; j<=end; j+=i){
                long long d = count[min(j+i-1, end)] - count[j-1];
                res += d*c*(j/i);
                res %=1000000007;
            }
        }
        return res;
    };
};
